name: Release (dev)

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-dev'
      - 'v[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+-dev'
      - 'v[0-9]+.[0-9]+.[0-9]+-alpha.[0-9]+-dev'

jobs:
  build:
    name: Build, publish Release and Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify branch is main
        run: |
          if ! git branch -r --contains ${{ github.ref_name }} | grep -q "origin/main"; then
            echo "Error: Tag ${{ github.ref_name }} is not on the main branch."
            exit 1
          fi
          echo "âœ… Tag is on the main branch."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version without "v"
        id: version
        run: |
          RAW_TAG="${{ github.ref_name }}"
          STRIPPED_V="${RAW_TAG#v}"
          CLEAN_TAG="${STRIPPED_V%-dev}"
          echo "clean_tag=$CLEAN_TAG" >> $GITHUB_OUTPUT

          if [[ "$CLEAN_TAG" == *"-alpha."* ]]; then
            echo "release_type=alpha" >> $GITHUB_OUTPUT
          elif [[ "$CLEAN_TAG" == *"-beta."* ]]; then
            echo "release_type=beta" >> $GITHUB_OUTPUT
          else
            echo "release_type=stable" >> $GITHUB_OUTPUT
          fi

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ steps.version.outputs.clean_tag }}
            # type=raw,value=latest,enable=${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') }}
            ${{ steps.version.outputs.release_type == 'stable' && format('ghcr.io/{0}/watchtower-for-emlat-dev:latest', env.OWNER_LC) || '' }}

      - name: Format owner name to lowercase
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.dev
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/watchtower-for-emlat-dev:latest
            ghcr.io/${{ env.OWNER_LC }}/watchtower-for-emlat-dev:${{ steps.version.outputs.clean_tag }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Watchtower for EML AdminTool ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
